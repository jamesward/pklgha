@ModuleInfo { minPklVersion = "0.25.1" }
module pklgha.GitHubAction

hidden Docker = import("GitHubActionDocker.pkl")
hidden Dotnet = import("GitHubActionDotnet.pkl")
hidden Elm = import("GitHubActionElm.pkl")
hidden Go = import("GitHubActionGo.pkl")
hidden Pkl = import("GitHubActionPkl.pkl")
hidden Java = import("GitHubActionJava.pkl")
hidden Nix = import("GitHubActionNix.pkl")
hidden Node = import("GitHubActionNode.pkl")
hidden OCaml = import("GitHubActionOCaml.pkl")
hidden Python = import("GitHubActionPython.pkl")
hidden Scala = import("GitHubActionScala.pkl")
hidden Swift = import("GitHubActionSwift.pkl")


typealias ActivityType = "assigned" | "unassigned" | "labeled" | "unlabeled" | "opened" | "edited" | "closed" | "reopened"| "synchronize" | "converted_to_draft" | "locked" | "unlocked" | "enqueued" | "dequeued" | "milestoned" | "demilestoned" | "ready_for_review" | "review_requested" | "review_request_removed" | "auto_merge_enabled" | "auto_merge_disabled"

typealias WorkFlowType = "completed"


class Push {
  tags: Listing<String>?
  paths: Listing<String>?
}

class WorkflowRun {
  workflows: Listing<String>?
  types: Listing<WorkFlowType>?
}

class PullRequest {
  types: Listing<ActivityType>?
  paths: Listing<String>?
}

class WorkflowDispatch {
  inputs: Dynamic?
}

class On {
  push: Push?
  pull_request: PullRequest?
  workflow_run: WorkflowRun?
  workflow_dispatch: WorkflowDispatch?
}

/// The events to trigger on
on: On

typealias Permission = "read" | "write"

class Permissions {
  contents: Permission?
  pages: Permission?
  `id-token`: Permission?
}

permissions: Permissions?

/// A Step to run
class Step {
  id: String?
  `if`: String?
  name: String?
  uses: String?
  with: Mapping<String, String?>?
  env: Mapping<String, String>?
  run: String?
  `working-directory`: String?
}

class Environment {
  name: String
  url: String?
}

class Run {
  `working-directory`: String?
}

class Defaults {
  run: Run?
}

class Concurrency {
  group: String
  `cancel-in-progress`: Boolean
}

concurrency: Concurrency?

typealias Needs = String | Listing<String>

class Job {
  // todo: sum type
  `runs-on`: String
  `if`: String?
  steps: Listing<Step>
  needs: Needs?
  permissions: Permissions?
  environment: Environment?
  defaults: Defaults?
}

jobs: Mapping<String, Job>

output {
  // todo: inject file name
  text = "# Generated file. DO NOT EDIT.\n" + super.text
}
